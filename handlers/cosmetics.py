# handlers/cosmetics.py
from aiogram import Router, F, types
from aiogram.filters.command import Command
from aiogram.enums import ChatAction
from aiogram.utils.keyboard import InlineKeyboardBuilder
import db

from config import VIDEO_FILE_ID
from data.cosmetics_sections import BRANDS, SUBGROUP_DEFINITIONS
from utils.gpt import generate_cosmetics_reply_ua
from utils.message_manager import dynamic_send

router = Router()


@router.message(Command("cosmetics"))
async def cmd_cosmetics(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cosmetics ‚Äî –≤—ã–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∫–æ—Å–º–µ—Ç–∏–∫–∏.
    """
    await entry_to_cosmetics(message)


# –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø—Ä—è–º—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ –±—Ä–µ–Ω–¥ –∏–ª–∏ –ø–æ–¥–≥—Ä—É–ø–ø—É
BRAND_KEYWORDS = [
    "HydroPeptide", "Medik8", "Image", "Is Clinical", "Colorescience",
    "Revitalash", "Academie", "Histolab"
]
SUBGROUP_KEYWORDS = ["–°–∏—Ä–æ–≤–∞—Ç–∫–∏", "–ú–∞—Å–∫–∏", "–ö—Ä–µ–º", "SPF", "–û—á–∏—â–µ–Ω–Ω—è", "Eye"]
PATTERN = r"(?i)(" + "|".join(BRAND_KEYWORDS + SUBGROUP_KEYWORDS) + r")"


@router.message(
    F.text.regexp(r"(?i)–∫–æ—Å–º–µ—Ç–∏–∫–∞|–±—Ä–µ–Ω–¥|–∑–∞—Å—ñ–±|—Å–∏—Ä–æ–≤–æ—Ç–∫–∞|–º–∞–∑—ñ|–∫—Ä–µ–º"))
async def entry_to_cosmetics(message: types.Message):
    """
    –¢—Ä–∏–≥–≥–µ—Ä –≤—Ö–æ–¥–∞ –≤ –º–µ–Ω—é –∫–æ—Å–º–µ—Ç–∏–∫–∏: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    —Å –≤–∏–¥–µ–æ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –≤—Å–µ—Ö –±—Ä–µ–Ω–¥–æ–≤.
    """
    builder = InlineKeyboardBuilder()
    for b in BRANDS:
        builder.button(text=f"{b['emoji']} {b['title']}",
                       callback_data=f"cosm_brand:{b['id']}")
    builder.adjust(2)

    await dynamic_send(bot=message.bot,
                       chat_id=message.chat.id,
                       user_id=message.from_user.id,
                       send_func=message.answer_video,
                       video=VIDEO_FILE_ID,
                       caption="üå∏ <b>–û–±–µ—Ä—ñ—Ç—å –±—Ä–µ–Ω–¥ –∫–æ—Å–º–µ—Ç–∏–∫–∏</b> üå∏",
                       parse_mode="HTML",
                       reply_markup=builder.as_markup())


@router.message(F.text.regexp(PATTERN))
async def cosmetics_faq(message: types.Message):
    """
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å—Ç–æ —É–ø–æ–º—è–Ω—É–ª –±—Ä–µ–Ω–¥ –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ‚Äî
    –ø–µ—Ä–µ–¥–∞–µ–º –µ–≥–æ —Ç–µ–∫—Å—Ç –≤ GPT, –æ—Ç–≤–µ—á–∞—é—â–µ–≥–æ —ç–∫—Å–ø–µ—Ä—Ç–æ–º –ø–æ —ç—Ç–∏–º –±—Ä–µ–Ω–¥–∞–º.
    """
    user_id = message.from_user.id
    text = message.text.strip()
    await db.add_message_to_history(user_id, "user", text)

    await message.bot.send_chat_action(message.chat.id, ChatAction.TYPING)
    reply = await generate_cosmetics_reply_ua(user_id, text)
    await db.add_message_to_history(user_id, "assistant", reply)

    await dynamic_send(bot=message.bot,
                       chat_id=message.chat.id,
                       user_id=user_id,
                       send_func=message.answer,
                       text=reply,
                       parse_mode="HTML")


@router.callback_query(F.data.startswith("cosm_brand:"))
async def on_brand(callback: types.CallbackQuery):
    """
    –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –±—Ä–µ–Ω–¥–∞: –ª–∏–±–æ —Å—Ä–∞–∑—É —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–≥—Ä—É–ø–ø),
    –ª–∏–±–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–≥—Ä—É–ø–ø + ¬´–ù–∞–∑–∞–¥¬ª.
    """
    brand_id = callback.data.split(":", 1)[1]
    subs = [s for s in SUBGROUP_DEFINITIONS if s["brand"] == brand_id]

    # –Ω–µ—Ç –ø–æ–¥–≥—Ä—É–ø–ø ‚Äî —Å—Ä–∞–∑—É –≤–µ—Å—å —Å–ø–∏—Å–æ–∫
    if not subs:
        sec = next(s for s in SUBGROUP_DEFINITIONS
                   if s["brand"] == brand_id and s["id"].endswith("_all"))
        lines = [f"<b>{sec['emoji']} {sec['title']}</b>", ""
                 ] + sec["raw_text"].splitlines()
        await callback.message.edit_caption(caption="\n".join(lines),
                                            parse_mode="HTML",
                                            reply_markup=None)
        await callback.answer()
        return

    # –µ—Å—Ç—å –ø–æ–¥–≥—Ä—É–ø–ø—ã ‚Äî —Å—Ç—Ä–æ–∏–º –∫–Ω–æ–ø–∫–∏
    builder = InlineKeyboardBuilder()
    for s in subs:
        builder.button(text=f"{s['emoji']} {s['title']}",
                       callback_data=f"cosm_sub:{s['id']}")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="cosm_back")
    builder.adjust(1)

    await callback.message.edit_caption(
        caption="üìÇ <b>–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –ø—Ä–æ–¥—É–∫—Ç—ñ–≤:</b>",
        parse_mode="HTML",
        reply_markup=builder.as_markup())
    await callback.answer()


@router.callback_query(F.data == "cosm_back")
async def on_back(callback: types.CallbackQuery):
    """
    –ö–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Å–ø–∏—Å–∫—É –±—Ä–µ–Ω–¥–æ–≤.
    """
    builder = InlineKeyboardBuilder()
    for b in BRANDS:
        builder.button(text=f"{b['emoji']} {b['title']}",
                       callback_data=f"cosm_brand:{b['id']}")
    builder.adjust(2)

    await callback.message.edit_caption(
        caption="üå∏ <b>–û–±–µ—Ä—ñ—Ç—å –±—Ä–µ–Ω–¥ –∫–æ—Å–º–µ—Ç–∏–∫–∏</b> üå∏",
        parse_mode="HTML",
        reply_markup=builder.as_markup())
    await callback.answer()


@router.callback_query(F.data.startswith("cosm_sub:"))
async def on_sub(callback: types.CallbackQuery):
    """
    –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–¥–≥—Ä—É–ø–ø—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –∫–∞–∫ –∫–Ω–æ–ø–∫–∏ + ¬´–ù–∞–∑–∞–¥¬ª.
    """
    sub_id = callback.data.split(":", 1)[1]
    sec = next(s for s in SUBGROUP_DEFINITIONS if s["id"] == sub_id)

    # —Å—Ç—Ä–æ–∏–º –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    items = [ln.strip() for ln in sec["raw_text"].splitlines() if ln.strip()]
    builder = InlineKeyboardBuilder()
    for idx, name in enumerate(items):
        builder.button(text=name, callback_data=f"cosm_prod:{sub_id}:{idx}")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data=f"cosm_brand:{sec['brand']}")
    builder.adjust(1)

    await callback.message.edit_caption(
        caption=f"<b>{sec['emoji']} {sec['title']}</b>",
        parse_mode="HTML",
        reply_markup=builder.as_markup())
    await callback.answer()


@router.callback_query(F.data.startswith("cosm_prod:"))
async def on_product(callback: types.CallbackQuery):
    """
    –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—Ä–æ–¥—É–∫—Ç–∞ ‚Äî –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤ GPT –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    _, sub_id, idx = callback.data.split(":", 2)
    idx = int(idx)
    sec = next(s for s in SUBGROUP_DEFINITIONS if s["id"] == sub_id)
    products = [
        ln.strip() for ln in sec["raw_text"].splitlines() if ln.strip()
    ]
    product_name = products[idx]

    user_id = callback.from_user.id
    await db.add_message_to_history(user_id, "user",
                                    f"–û–ø–∏—Å –ø—Ä–æ–¥—É–∫—Ç—É: {product_name}")

    await callback.bot.send_chat_action(callback.message.chat.id,
                                        ChatAction.TYPING)
    reply = await generate_cosmetics_reply_ua(
        user_id, f"–û–ø–∏—Å –ø—Ä–æ–¥—É–∫—Ç—É: {product_name}")
    await db.add_message_to_history(user_id, "assistant", reply)

    md = (f"**_{product_name}_**\n\n"
          f"{reply}\n\n"
          "_‚ú® –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ù–∞–∑–∞–¥¬ª, —â–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ —Å–ø–∏—Å–∫—É –ø—Ä–æ–¥—É–∫—Ç—ñ–≤_")
    builder = InlineKeyboardBuilder()
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data=f"cosm_sub:{sub_id}")
    builder.adjust(1)

    await callback.message.edit_caption(caption=md,
                                        parse_mode="Markdown",
                                        reply_markup=builder.as_markup())
    await callback.answer()
