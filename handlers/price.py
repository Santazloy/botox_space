# handlers/price.py

from aiogram import Router, F, types
from aiogram.enums import ChatAction, ParseMode
from aiogram.types import InputMediaVideo
from aiogram.utils.keyboard import InlineKeyboardBuilder
import db

from config import VIDEO_FILE_ID, SECTION_SEPARATOR
from data.price_sections import GROUPS, SECTION_DEFINITIONS
from utils.price import parse_service_line, format_price_item
from utils.gpt import generate_gpt_reply_ua

router = Router()


@router.message(F.text.regexp(r"(?i)–ø—Ä–∞–π—Å|—Ü—ñ–Ω–∞|–≤–∞—Ä—Ç—ñ—Å—Ç—å|–≤–∞—Ä—Ç—ñ—Å"))
async def show_price_groups(message: types.Message):
    """
    –®–∞–≥ 1: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –≥—Ä—É–ø–ø –ø—Ä–∞–π—Å–∞.
    """
    builder = InlineKeyboardBuilder()
    for grp in GROUPS:
        builder.button(text=f"{grp['emoji']} {grp['title']}",
                       callback_data=f"price_group:{grp['id']}")
    builder.adjust(2)

    await message.answer_video(video=VIDEO_FILE_ID,
                               caption="üåü <b>–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –ø—Ä–∞–π—Å—É</b> üåü",
                               parse_mode=ParseMode.HTML,
                               reply_markup=builder.as_markup())


@router.callback_query(F.data == "price_back")
async def on_back(callback: types.CallbackQuery):
    """
    –ö–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª –∫ —Å–ø–∏—Å–∫—É –≥—Ä—É–ø–ø ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–æ –∂–µ –≤–∏–¥–µ–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    builder = InlineKeyboardBuilder()
    for grp in GROUPS:
        builder.button(text=f"{grp['emoji']} {grp['title']}",
                       callback_data=f"price_group:{grp['id']}")
    builder.adjust(2)

    await callback.message.edit_caption(
        caption="üåü <b>–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –ø—Ä–∞–π—Å—É</b> üåü",
        parse_mode=ParseMode.HTML,
        reply_markup=builder.as_markup())
    await callback.answer()


@router.callback_query(F.data.startswith("price_group:"))
async def on_group(callback: types.CallbackQuery):
    """
    –®–∞–≥ 2: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ä–∞–∑–¥–µ–ª—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã + ¬´–ù–∞–∑–∞–¥¬ª.
    """
    group_id = callback.data.split("price_group:", 1)[1]
    subs = [s for s in SECTION_DEFINITIONS if s["group"] == group_id]

    builder = InlineKeyboardBuilder()
    for sec in subs:
        builder.button(text=f"{sec['emoji']} {sec['title']}",
                       callback_data=f"price_section:{sec['id']}")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="price_back")
    builder.adjust(1)

    await callback.message.edit_caption(caption="üìÇ <b>–û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª</b>",
                                        parse_mode=ParseMode.HTML,
                                        reply_markup=builder.as_markup())
    await callback.answer()


@router.callback_query(F.data.startswith("price_section:"))
async def on_section(callback: types.CallbackQuery):
    """
    –®–∞–≥ 3: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ª—É–≥–∏ —Ä–∞–∑–¥–µ–ª–∞ –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–æ–∫ + ¬´–ù–∞–∑–∞–¥¬ª.
    """
    section_id = callback.data.split("price_section:", 1)[1]
    sec = next((s for s in SECTION_DEFINITIONS if s["id"] == section_id), None)
    if not sec:
        await callback.answer("–†–æ–∑–¥—ñ–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return

    items = [l.strip() for l in sec["raw_text"].splitlines() if l.strip()]
    builder = InlineKeyboardBuilder()
    for idx, line in enumerate(items):
        parsed = parse_service_line(line)
        if parsed and not parsed["is_note"]:
            btn = format_price_item(parsed["name"], parsed["price"],
                                    parsed["currency"])
        else:
            btn = parsed["name"] if parsed else line
        builder.button(text=btn,
                       callback_data=f"price_item:{section_id}:{idx}")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data=f"price_group:{sec['group']}")
    builder.adjust(1)

    await callback.message.edit_caption(
        caption=f"<b>{sec['emoji']} {sec['title']}</b>\n{SECTION_SEPARATOR}",
        parse_mode=ParseMode.HTML,
        reply_markup=builder.as_markup())
    await callback.answer()


@router.callback_query(F.data.startswith("price_item:"))
async def on_item(callback: types.CallbackQuery):
    """
    –®–∞–≥ 4: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —É—Å–ª—É–≥—É ‚Äî —É–¥–∞–ª—è–µ–º –≤–∏–¥–µ–æ-–º–µ–Ω—é,
    –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —É GPT –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    —Å –∫–Ω–æ–ø–∫–æ–π ¬´–ù–∞–∑–∞–¥¬ª –≤ —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª.
    """
    _, section_id, idx_str = callback.data.split(":", 2)
    idx = int(idx_str)

    # –Ω–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É —É—Å–ª—É–≥–∏
    sec = next(s for s in SECTION_DEFINITIONS if s["id"] == section_id)
    items = [l.strip() for l in sec["raw_text"].splitlines() if l.strip()]
    line = items[idx]

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º GPT
    user_id = callback.from_user.id
    await db.add_message_to_history(user_id, "user", f"–û–ø–∏—Å –ø—Ä–æ—Ü–µ–¥—É—Ä–∏: {line}")
    await callback.bot.send_chat_action(callback.message.chat.id,
                                        ChatAction.TYPING)
    reply = await generate_gpt_reply_ua(user_id, f"–û–ø–∏—Å –ø—Ä–æ—Ü–µ–¥—É—Ä–∏: {line}")
    await db.add_message_to_history(user_id, "assistant", reply)

    # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –≤–∏–¥–µ–æ-–º–µ–Ω—é
    await callback.message.delete()

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    text = f"**_{line}_**\n\n{reply}"
    builder = InlineKeyboardBuilder()
    builder.button(text="üîô –ù–∞–∑–∞–¥",
                   callback_data=f"price_back_section:{section_id}")
    builder.adjust(1)

    await callback.message.answer(text,
                                  parse_mode=ParseMode.MARKDOWN,
                                  reply_markup=builder.as_markup())
    await callback.answer()


@router.callback_query(F.data.startswith("price_back_section:"))
async def on_back_section(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ ¬´–ù–∞–∑–∞–¥¬ª –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ —É—Å–ª—É–≥–∏:
    —É–¥–∞–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –≤–Ω–æ–≤—å –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–¥–µ–æ+–∫–Ω–æ–ø–∫–∏ —É—Å–ª—É–≥ —Ä–∞–∑–¥–µ–ª–∞.
    """
    section_id = callback.data.split("price_back_section:", 1)[1]
    sec = next(s for s in SECTION_DEFINITIONS if s["id"] == section_id)
    items = [l.strip() for l in sec["raw_text"].splitlines() if l.strip()]

    # —Å–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è
    await callback.message.delete()

    # —Å—Ç—Ä–æ–∏–º –∫–Ω–æ–ø–∫–∏ —Å–Ω–æ–≤–∞
    builder = InlineKeyboardBuilder()
    for idx, line in enumerate(items):
        parsed = parse_service_line(line)
        if parsed and not parsed["is_note"]:
            btn = format_price_item(parsed["name"], parsed["price"],
                                    parsed["currency"])
        else:
            btn = parsed["name"] if parsed else line
        builder.button(text=btn,
                       callback_data=f"price_item:{section_id}:{idx}")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data=f"price_group:{sec['group']}")
    builder.adjust(1)

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ-–º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞
    await callback.message.answer_video(
        video=VIDEO_FILE_ID,
        caption=f"<b>{sec['emoji']} {sec['title']}</b>\n{SECTION_SEPARATOR}",
        parse_mode=ParseMode.HTML,
        reply_markup=builder.as_markup())
    await callback.answer()
